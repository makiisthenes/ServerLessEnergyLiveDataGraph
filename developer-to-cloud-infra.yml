AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  BucketName:
    {Type: String, Default: "hack-sussex-interconnector-front-end"}
  OriginAccessControlName:
    {Type: String, Default: "hack-sussex-origin-access-control"}
  ApiToken:
    {Type: String, Default: "defaulttoken"}


Resources:
  OriginAccessControl:
   Type: AWS::CloudFront::OriginAccessControl
   Properties: 
    OriginAccessControlConfig: 
        Description: "Control Access to S3"
        Name: !Ref OriginAccessControlName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  StaticResourcesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  StaticResourcesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticResourcesBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${StaticResourcesBucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}
            
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub ${StaticResourcesBucket}.s3.${AWS::Region}.amazonaws.com
            Id: S3Origin
            OriginAccessControlId: !Ref OriginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: S3Origin
          MinTTL: 0
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
  
  APITokenParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: entsoe-api-token
      Type: String
      Value: !Ref ApiToken
      Description: SSM Parameter for the entsoe API token for the workshop
  
  InterconnectorDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "datetime"
          AttributeType: "N"
        - 
          AttributeName: "date"
          AttributeType: "N"

      KeySchema: 
        - 
          AttributeName: "datetime"
          KeyType: "HASH"
        - 
          AttributeName: "date"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: interconnector-data

  DynamoDbRolePut:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Description: All access to DynamoDB table
      Policies:
        - PolicyName: DynamoDBAllowAllForInterconnectorDB
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowAll
                Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt InterconnectorDynamoDB.Arn
        - PolicyName: SSMParameter
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: EntsoeSSMParameter
                Effect: Allow
                Action:
                  - ssm:DescribeParameters
                  - ssm:GetParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/entsoe-api-token
        - PolicyName: Logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: LogCreateGroup
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Sid: logStream
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:/aws/lambda/entsoe-to-dynamodb-interconnector:*
      RoleName: interconnectorGetAndPutInDynamodb
      
  ProcessEntsoeToDynamoDB:
    Type: AWS::Lambda::Function
    Properties:
      Architectures: 
      - x86_64
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            # Sample lambda function as will be overwritten in workshop!
            return {
                'statusCode': 200,
                'body': 'Hello from Lambda!'
            }
      FunctionName: entsoe-to-dynamodb-interconnector
      Handler: lambda_function.lambda_handler
      Role: !GetAtt DynamoDbRolePut.Arn
      Runtime: python3.9
      Timeout: 120
      MemorySize: 200

  ScheduledLambdaRule:
  # Note that this schedule does not have permission to do this so you'll need to add it as a part of the workshop
    Type: AWS::Events::Rule
    Properties:
      Description: Scheduled Event
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ProcessEntsoeToDynamoDB.Arn
          Id: MyEventBridgeTarget

  DynamoDbRoleRead:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Description: All access to DynamoDB table
      Policies:
        - PolicyName: DynamoDBAllowAllForInterconnectorDB
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowAll
                Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:BatchGetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:ConditionCheckItem
                Resource: !Sub ${InterconnectorDynamoDB.Arn}
      RoleName: interconnector-read-dynamodb

  LambdaGetData:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            # Sample lambda function as will be overwritten in workshop!
            return {
                'statusCode': 200,
                'body': 'Hello from Lambda!'
            }
      FunctionName: get-dynamodb-interconnector
      Handler: index.lambda_handler
      Role: !Sub ${DynamoDbRoleRead.Arn}
      Runtime: python3.9
      Timeout: 60
      MemorySize: 200

# cloudformation input a very unique s3 bucket name
#1 input API token in SSM
#2 Add schedule
#3 Add zipped code
#4 Test it out to see dynamo db
#5 paste code in lambda 2
#6 create API gateway make sure edge optimised
#7 don't forget to enable CORS
#8 Workshop finished. 