{"version":3,"sources":["App.js","actions/interconnectorActions.js","serviceWorker.js","reducers/interconnectorReducer.js","reducers/rootReducer.js","Store.js","index.js"],"names":["App","dispatch","useDispatch","state","useSelector","interconnector","apiLink","setApiLink","React","useState","fetchData","_ref","apiLinkUser","async","type","response","axios","get","labels","franceData","belgiumData","netherlandsData","norwayData","i","data","body","Responses","length","push","France","Belgium","Netherlands","Norway","moment","datetime","format","payload","e","getData","useEffect","intervalId","setInterval","clearInterval","createElement","className","loading","Line","Boolean","window","location","hostname","match","initalState","datasets","label","borderColor","pointBorderColor","fill","interconnectorReducer","arguments","undefined","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cc2e944.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport { Line } from 'react-chartjs-2';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getData } from \"./actions/interconnectorActions\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state.interconnector);\n  const [apiLink, setApiLink] = React.useState('https://zpf175xw2f.execute-api.eu-north-1.amazonaws.com/Learning');\n\n  // Function to dispatch the action to fetch data\n  const fetchData = () => {\n    dispatch(getData({\n      apiLinkUser: apiLink\n    }));\n  };\n\n  // useEffect hook to start fetching data automatically\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      fetchData();\n    }, 10000);  // after 15 seconds.\n\n    // Cleanup function to clear the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, [apiLink]); // Depend on apiLink to restart the interval if the API link changes\n\n  return (\n    <div className=\"App\">\n      <h1>Interconnector Serverless Sample Workshop</h1>\n      <p>By Michael Peres</p>\n      <div className={\"btns-wrapper\"}>\n        {state.loading && <p>Updating...</p>}\n      </div>\n      <div className={\"chart-wrapper\"}>\n        <Line\n          data={state.data}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","import axios from \"axios\";\nimport moment from \"moment\";\n\nexport const getData = ({ apiLinkUser }) => async dispatch => {\n  try {\n    dispatch({\n      type: \"AWAITING_interconnector\"\n    })\n\n    const response = await axios.get(apiLinkUser)\n    const labels = [];\n    const franceData = [];\n    const belgiumData = [];\n    const netherlandsData = [];\n    const norwayData = [];\n    for (let i = 0; i < response.data.body.Responses[\"electric_data\"].length; i++) {\n      franceData.push(response.data.body.Responses[\"electric_data\"][i].France)\n      belgiumData.push(response.data.body.Responses[\"electric_data\"][i].Belgium)\n      netherlandsData.push(response.data.body.Responses[\"electric_data\"][i].Netherlands)\n      norwayData.push(response.data.body.Responses[\"electric_data\"][i].Norway)\n      labels.push(moment(response.data.body.Responses[\"electric_data\"][i].datetime * 1000).format(\"LT\"))\n\n    }\n\n    dispatch({\n      type: \"SUCCESS_interconnector\",\n      payload: {\n        franceData,\n        belgiumData,\n        netherlandsData,\n        norwayData,\n        labels\n      }\n    })\n  } catch (e) {\n    dispatch({\n      type: \"REJECTED_interconnector\",\n    })\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initalState = {\n  loading: false,\n  data: {\n    labels: [],\n    datasets: [{\n      label: \"Default\",\n      data: [],\n      borderColor: 'rgba(238,175,0, 0.5)',\n      pointBorderColor: 'rgba(238,175,0, 0.7)',\n      fill: false\n    }]\n  }\n};\n\nconst interconnectorReducer = (state = initalState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case \"AWAITING_interconnector\":\n      return {\n        ...state,\n        loading: true\n      }\n    case \"REJECTED_interconnector\":\n      return {\n        ...state,\n        loading: false,\n      }\n    case \"SUCCESS_interconnector\":\n      return {\n        ...state,\n        loading: false,\n        data: {\n          labels: payload.labels,\n          datasets: [{\n            label: \"France\",\n            data: payload.franceData,\n            borderColor: 'rgba(238,175,0, 0.5)',\n            pointBorderColor: 'rgba(238,175,0, 0.7)',\n            fill: false\n          },\n          {\n            label: \"Belgium\",\n            data: payload.belgiumData,\n            borderColor: 'rgba(255,23,23, 0.8)',\n            pointBorderColor: 'rgba(255,23,23, 0.8)',\n            fill: false\n          },\n          {\n            label: \"Netherlands\",\n            data: payload.netherlandsData,\n            borderColor: 'rgba(17,23,255, 0.8)',\n            pointBorderColor: 'rgba(17,23,255, 0.8)',\n            fill: false\n          },\n          {\n            label: \"Norway\",\n            data: payload.norwayData,\n            borderColor: 'rgba(17,255,0, 0.8)',\n            pointBorderColor: 'rgba(17,255,0, 0.8)',\n            fill: false\n          }]\n        }\n      }\n    default:\n      return state;\n  }\n}\n\nexport default interconnectorReducer;\n","import { combineReducers } from \"redux\";\nimport interconnectorReducer from \"./interconnectorReducer\";\n\nconst rootReducer = combineReducers({\n  interconnector: interconnectorReducer\n})\n\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from \"./Store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}